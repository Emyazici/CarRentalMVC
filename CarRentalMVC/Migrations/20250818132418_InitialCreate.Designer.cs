// <auto-generated />
using System;
using CarRentalMVC.Models.Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalMVC.Migrations
{
    [DbContext(typeof(CarRentalContext))]
    [Migration("20250818132418_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FleetId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FleetId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.DamageReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("VehicleId");

                    b.ToTable("DamageReports");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Fleet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedByAdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByAdminId");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.FleetApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FleetId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ApplicantUserId");

                    b.HasIndex("FleetId")
                        .IsUnique()
                        .HasFilter("[FleetId] IS NOT NULL");

                    b.ToTable("FleetApplications");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromBranchId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToBranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FromBranchId");

                    b.HasIndex("ToBranchId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DailyPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FleetId")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("FleetId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.VehicleAssignmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromBranchId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToBranchId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromBranchId");

                    b.HasIndex("ToBranchId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAssignmentHistories");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Admin", b =>
                {
                    b.HasBaseType("CarRentalMVC.Models.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Customer", b =>
                {
                    b.HasBaseType("CarRentalMVC.Models.Entities.User");

                    b.Property<string>("DriverLicenseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.FleetOwner", b =>
                {
                    b.HasBaseType("CarRentalMVC.Models.Entities.User");

                    b.Property<int?>("FleetId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.HasIndex("FleetId")
                        .IsUnique()
                        .HasFilter("[FleetId] IS NOT NULL");

                    b.ToTable("Users", t =>
                        {
                            t.Property("FleetId")
                                .HasColumnName("FleetOwner_FleetId");
                        });

                    b.HasDiscriminator().HasValue("FleetOwner");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Staff", b =>
                {
                    b.HasBaseType("CarRentalMVC.Models.Entities.User");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.BranchStaff", b =>
                {
                    b.HasBaseType("CarRentalMVC.Models.Entities.Staff");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasIndex("BranchId");

                    b.HasDiscriminator().HasValue("BranchStaff");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.FleetStaff", b =>
                {
                    b.HasBaseType("CarRentalMVC.Models.Entities.Staff");

                    b.Property<int>("FleetId")
                        .HasColumnType("int");

                    b.HasIndex("FleetId");

                    b.HasDiscriminator().HasValue("FleetStaff");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Branch", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Fleet", "Fleet")
                        .WithMany("Branches")
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.DamageReport", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Branch", "Branch")
                        .WithMany("DamageReports")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.BranchStaff", "CreatedBy")
                        .WithMany("DamageReports")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("DamageReports")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CreatedBy");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Fleet", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Admin", "ApprovedByAdmin")
                        .WithMany("Fleets")
                        .HasForeignKey("ApprovedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedByAdmin");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.FleetApplication", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Admin", "Admin")
                        .WithMany("FleetApplications")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CarRentalMVC.Models.Entities.User", "ApplicantUser")
                        .WithMany()
                        .HasForeignKey("ApplicantUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Fleet", "Fleet")
                        .WithOne("FleetApplication")
                        .HasForeignKey("CarRentalMVC.Models.Entities.FleetApplication", "FleetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Admin");

                    b.Navigation("ApplicantUser");

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Reservation", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.BranchStaff", "CreatedBy")
                        .WithMany("Reservations")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Branch", "FromBranch")
                        .WithMany("ReservationsFrom")
                        .HasForeignKey("FromBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Branch", "ToBranch")
                        .WithMany("ReservationsTo")
                        .HasForeignKey("ToBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("Reservations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("FromBranch");

                    b.Navigation("ToBranch");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Vehicle", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Branch", "Branch")
                        .WithMany("Vehicles")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Fleet", "Fleet")
                        .WithMany("Vehicles")
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.VehicleAssignmentHistory", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Branch", "FromBranch")
                        .WithMany("VehicleAssignmentHistoriesFrom")
                        .HasForeignKey("FromBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Branch", "ToBranch")
                        .WithMany("VehicleAssignmentHistoriesTo")
                        .HasForeignKey("ToBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalMVC.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleAssignmentHistories")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromBranch");

                    b.Navigation("ToBranch");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.FleetOwner", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Fleet", "Fleet")
                        .WithOne("FleetOwner")
                        .HasForeignKey("CarRentalMVC.Models.Entities.FleetOwner", "FleetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.BranchStaff", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Branch", "Branch")
                        .WithMany("BranchStaffs")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.FleetStaff", b =>
                {
                    b.HasOne("CarRentalMVC.Models.Entities.Fleet", "Fleet")
                        .WithMany("FleetStaffs")
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Branch", b =>
                {
                    b.Navigation("BranchStaffs");

                    b.Navigation("DamageReports");

                    b.Navigation("ReservationsFrom");

                    b.Navigation("ReservationsTo");

                    b.Navigation("VehicleAssignmentHistoriesFrom");

                    b.Navigation("VehicleAssignmentHistoriesTo");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Fleet", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("FleetApplication");

                    b.Navigation("FleetOwner");

                    b.Navigation("FleetStaffs");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Vehicle", b =>
                {
                    b.Navigation("DamageReports");

                    b.Navigation("Reservations");

                    b.Navigation("VehicleAssignmentHistories");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Admin", b =>
                {
                    b.Navigation("FleetApplications");

                    b.Navigation("Fleets");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarRentalMVC.Models.Entities.BranchStaff", b =>
                {
                    b.Navigation("DamageReports");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
